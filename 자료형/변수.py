# 변수 : 자료형의 값을 저장하는 공간

a = 1
b = "python"
c = [1,2,3] # 변수를 만들 때는 위 예처럼 =(assignment) 기호를 사용한다.

# 파이썬은 변수에 저장된 값을 스스로 판단하여 자료형의 타입을 지정하기 때문에 편리하다.
# 변수이름 = 변수에 저장할 값

# 변수란?
# 파이썬에서 사용하는 변수는 객체를 가리키는 것이라고도 말할 수 있다.
# 객체란 자료형의 데이터(값)와 같다.

a = [1,2,3] 
# [1,2,3] 값을 가지는 리스트 데이터(객체)가 자동으로 메모리에 생성되고 
# 변수 a는 [1,2,3] 리스트가 저장된 메모리의 주소를 가리키게 된다. 
# 메모리란 컴퓨터가 프로그램에서 사용하는 데이터를 기억하는 공간이다.

a = [1,2,3] 
print(id(a)) # 1788185327296 >> 결괏값 // [1,2,3] 리스트의 주소 값이다.
#id 함수 : 변수가 가리키고 있는 객체의 주소 값을 리턴하는 파이썬 내장 함수이다. 

### 리스트 복사
a = [1,2,3] 
b = a # b와 a는 완전히 동일하다 
# [1,2,3]이라는 리스트 객체를 참조하는 변수가 a 변수 1개에서 b변수가 추가되어 2개로 늘어났다.

print(id(a)) # 2313818508480 >> 결괏값
print(id(b)) # 2313818508480 >> 결괏값
print(a is b) # True >> 결괏값

a[1] = 4 
print(a) # [1, 4, 3] >> 결괏값
print(b) # [1, 4, 3] >> 결괏값 // a 리스트의 2번째 요소를 바꾸었지만 b 리스트의 해당 요솟값도 바뀌었다.

### b 변수를 생성할 때 a 변수의 값을 가져오면서 a와는 다른 주소를 가리키도록 만드는 방법

# 1. [:]이용 // 리스트 전체를 가리키는 [:]을 사용해서 복사하는 것이다.
a = [1,2,3]
b = a[:]
a[1] = 4
print(a) # [1, 4, 3] >> 결괏값
print(b) # [1, 2, 3] >> 결괏값 // a 리스트 값을 바꾸더라도 b 리스트에는 영향을 끼치지 않는다.

# 2. copy 모듈 이용 // from copy import copy : 파이썬 모듈 (copy 함수를 쓰기 위해서 사용하는 것)
from copy import copy
a = [1,2,3]
b = copy(a) # b = a[:]과 동일하다.
print(b is a) # False >> 결괏값

# 리스트 자료형의 자체 함수인 copy 함수를 사용해도 copy 모듈을 사용하는 것과 동일하다.
a = [1,2,3]
b = a.copy()
print(b is a) # False >> 결괏값

### 변수를 만드는 여러 가지 방법

(a, b) = 'python', 'life' # 튜플은 괄호를 생략해도 된다.
[a, b] = ['python', 'life'] # 리스트
a = b = 'python' # 여러 개의 변수에 같은 값을 대입할 수도 있다.

a = 3
b = 5
a, b = b, a
print(a) # 5 >> 결괏값
print(b) # 3 >> 결괏값




