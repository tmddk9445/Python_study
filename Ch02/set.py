# 집합 자료형

# 집합에 관련된 것을 쉽게 처리하기 위해 만든 자료형이다.
# set 키워드를 사용해 만들 수 있다.

s1 = set([1,2,3])
print(s1) # {1, 2, 3} >> 결괏값

s2 = set("Hello")
print(s2) # {'e', 'H', 'l', 'o'} >> 결괏값 // 비어 있는 집합 자료형은 s = set()로 만들 수 있다.

### 집합 자료형의 특징 (set의 특징)

# 중복을 허용하지 않는다. // 중복을 허용하지 않는 특징 때문에 set은 자료형의 중복을 제거하기 위한 필터로 종종 사용된다.
# 순서가 없다.(Unordered). 
# 리스트나 튜플은 순서가 있기(ordered) 때문에 인덱싱을 통해 자료형의 값을 얻을 수 있지만
# set 자료형은 순서가 없기 때문에 인덱싱으로 값을 얻을 수 없다.
# >> 딕셔너리 역시 순서가 없는 자료형이라 인덱싱을 지원하지 않는다.

# set 자료형에 저장된 값을 인덱싱으로 접근하려면 리스트나 튜플로 변환한 후 해야한다.
s1 = set([1,2,3])
l1 = list(s1)
print(l1) # [1, 2, 3] >> 결괏값
print(l1[0]) # 1 >> 결괏값

t1 = tuple(s1)
print(t1) # (1, 2, 3) >> 결괏값
print(t1[0]) # 1 >> 결괏값

### 교집합(&), 합집합(|), 차집합(-) 구하기 ###

# 교집합(&)
s1= set([1,2,3,4,5,6])
s2= set([4,5,6,7,8,9])

print(s1&s2) # {4, 5, 6} >> 결괏값
print(s1.intersection(s2)) # {4, 5, 6} >> 결괏값 // == s2.intersection(s1)

# 합집합(|)
print(s1|s2) # {1, 2, 3, 4, 5, 6, 7, 8, 9} >> 결괏값
print(s1.union(s2)) # {1, 2, 3, 4, 5, 6, 7, 8, 9} >> 결괏값 // == s2.union(s1)

# 차집합(-)
print(s1-s2) # {1, 2, 3} >> 결괏값
print(s1.difference(s2)) # {1, 2, 3} >> 결괏값

print(s2-s1) # {8, 9, 7} >> 결괏값

### 집합 자료형 관련 함수들 ###

# 값 1개 추가하기(add) : 이미 만들어진 set 자료형에 값을 추가할 수 있다. 
s1 = set([1,2,3])
s1.add(4)
print(s1) # {1, 2, 3, 4} >> 결괏값

# 값 여러 개 추가하기(update) : 여러 개의 값을 한꺼번에 추가(update)할 수 있다.
s1 = set([1,2,3])
s1.update([4,5,6])
print(s1) # {1, 2, 3, 4, 5, 6} >> 결괏값

# 특정 값 제거하기(remove) : 특정 값을 제거할 수 있다.
s1 = set([1,2,3])
s1.remove(2)
print(s1) # {1, 3} >> 결괏값

